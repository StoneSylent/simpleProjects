Author: Brandon Stone (.505)
Course: CSE 3341
Assignment: Core Interpreter Project, Part1 (Tokenizer)
Due: Oct 9th, 2015 11:59pm

Tokenizer class, how to use.
(1.)-creation of a new Tokenizer object requires the use of the input file to be tokenized.
			"Tokenizer t = new Tokenizer(inputFile);"
(2.)- The isEOF() function returns true if the end of the file has been found.
(3.)- The getToken() function returns the int value of the first token in the file, assumes 
			there is a token to be found. isEOF will report if there is a token left.			
(4.)- The skipToken() function skips over the token that getToken() returns. If "A" and "B"
			are Tokens and getToken() returns the int value of "A" and skipToken() is then called
			the next call to getToken() will return the int value of "B" 
						
Tokenizer class design.

(1.) LoadCoreValues()
			-contains the reserved words and special symbols lists for easy modifications.
			-creates a mapping from string to integer values as specified in the project instructions.
(2.) constants INTEGER and IDENTIFIER
			-the values reported by the getToken() function when the token is an integer or identifier.
(3.) getLowerToken(), getIdentifierToken(), getIntToken(), getSpecialToken()
		  -helper methods to get the token types that the names suggest.
			-easy separation of token types.
			-ability to modify any token type as logic between types is separated.
			-returns token in string form. (i.e: "program")
			-prints error messages if token conditions are not valid for token found.
(4.) 	getType()
			-reports the type of a character
			-'3' is "int", 'A' is "uppercase", etc.
(5.) findTokenStart()
			-returns the position of the first character of a token.
			-as getToken() should only be called when a token remains this function always finds a value
			when called inside the getToken() function.
			-returns -1 if no token is found to exist in the file. Used in isEOF(). Useful for blank inputFiles. 
			-if a line does not contain a token the function will continue to read lines until it does.
(6.) findFirstNotWhitespace()
			-helper function for findTokenStart()		
			-returns the position of the first non-white-space token of the given line.
			-returns -1 if line is all white-space
(7.) line, the last line read from the scanner object.
(8.) token, the last remembered token.
(9.) core, map initialized by (1.) LoadCoreValues()
(10.) getToken()
				- checks if token was remembered if not does as followed
					-finds the start of the token.
					-removes white-space from the line.
					-determines the token type and uses helper functions to get the entire token.
						-helper methods (3.) validate the token as being part of the grammar.
					-returns the int value of the token.
(11.) skipToken()
				- requires token to already been found. 
				- removes token from the line (7.)
				- reads lines until the start of the next token is found.
				- flags EOF function by setting line=null; when no more tokens exist.
				- resets remembered token (8.) to null for no token remembered.
(12.) isEOF()
			-before getToken() is ever called checks for the start of a token in the input file.
				-returns false if no token is found in the file.
			-checks if the line flag is set (11. bullet 4) to determine if the EOF has been found.
			-Prints EOF if returning true;
(13.) tokenVal() 
			-returns the int value of token (8.)
			-helper function used in getToken() (10.)
			
Tokenizer class Testing	

	With helper methods (3.) testing of each of the token types was done after each function was written.
	Junit testing was avoided due to the added complexity of private variables, input files, etc.
	Testing was done throughout the creation of the program.
	Things I can recall testing:
	-empty file
	-file with many empty lines
	-empty lines followed by word(s)
	-one word file (valid and invalid)
	-all reserved words, special symbol (with and without commas)
	-special symbols followed by words/white-space
	-special symbols followed by special symbols to test greediness. (;; == === <== =<= <=> etc.)
	-Identifiers (with and without ending numbers)
	-Identifiers followed by letters/special symbols.
	-A sample input file has been provided: inputTest
	
-------------------------------------------------------------------
Last edit: 			 10/9/2015															 				  			 			
